#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

#define CE_PIN 9
#define CSN_PIN 10

// Define pins
#define BUTTON_PIN 2        // Button input pin
#define LED_GREEN 4
#define LED_BLUE 5
#define LED_RED 6

RF24 radio(CE_PIN, CSN_PIN);
const byte address[6] = "00001";

bool buttonPreviouslyPressed = false;

void setup() {
  Serial.begin(9600);
  
  // Setup pins
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Active LOW button
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_BLUE, OUTPUT);
  pinMode(LED_RED, OUTPUT);

  // Initialize nRF24L01+
  radio.begin();
  radio.setPALevel(RF24_PA_HIGH);
  radio.setDataRate(RF24_250KBPS);
  radio.setChannel(0x76);
  radio.openWritingPipe(address);
  radio.openReadingPipe(1, address);
  radio.stopListening();  // Start in transmit mode
}

void loop() {
  // --- Check Button Press ---
  bool buttonPressed = digitalRead(BUTTON_PIN) == LOW;

  if (buttonPressed && !buttonPreviouslyPressed) {
    // Send "CAPTURE" command on button press
    const char text[] = "CAPTURE";
    radio.stopListening();  // Ensure in transmit mode
    bool success = radio.write(&text, sizeof(text));
    Serial.println(success ? "Capture command sent!" : "Failed to send!");
    delay(200);  // Debounce delay
  }

  buttonPreviouslyPressed = buttonPressed;

  // --- Switch to receive mode and listen for status ---
  radio.startListening();

  unsigned long startTime = millis();
  while (millis() - startTime < 500) {
    if (radio.available()) {
      char message[32] = "";
      radio.read(&message, sizeof(message));
      Serial.print("Received status: ");
      Serial.println(message);

      // Parse storage percentage from message
      int storage = atoi(strtok(message, "%|"));
      Serial.print("Storage: ");
      Serial.print(storage);
      Serial.println("%");

      // LED Control Logic
      if (storage > 50) {
        digitalWrite(LED_GREEN, HIGH);
        digitalWrite(LED_BLUE, LOW);
        digitalWrite(LED_RED, LOW);
      } else if (storage > 20) {
        digitalWrite(LED_GREEN, LOW);
        digitalWrite(LED_BLUE, HIGH);
        digitalWrite(LED_RED, LOW);
      } else {
        digitalWrite(LED_GREEN, LOW);
        digitalWrite(LED_BLUE, LOW);
        digitalWrite(LED_RED, HIGH);
      }

      break;  // Exit loop after receiving a message
    }
  }

  radio.stopListening();  // Go back to transmit mode for next button press
  delay(200);  // Small delay to avoid flooding
}
